/* Additional styles */
@import "additional-styles/utility-patterns.css";
@import "additional-styles/theme.css";

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Brand link color via token */
a { color: hsl(var(--primary)); }
a:hover { color: hsl(var(--primary) / 0.9); }

.animated {
  -webkit-animation-duration: 1s;
  animation-duration: 1s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
}

.height-screen-helper { min-height: calc(100vh - 80px); }

/* ===============================
   THEME: map shadcn tokens to colors.json variables
   colors.json defines:
   --heat-*, --accent-black/white, --border-*, --background-*, etc.
   =============================== */
@layer base {
  :root {
    /* Surfaces */
    --background: var(--background-base);
    --foreground: var(--accent-black);

    --card: var(--accent-white);
    --card-foreground: var(--accent-black);

    --popover: var(--accent-white);
    --popover-foreground: var(--accent-black);

    /* Localhowl brand (from colors.json) */
    --primary: var(--heat-100);
    --primary-foreground: var(--accent-white);

    /* Subtle / neutral */
    --secondary: var(--black-alpha-4);
    --secondary-foreground: var(--accent-black);

    --muted: var(--black-alpha-4);
    --muted-foreground: var(--black-alpha-72);

    /* Generic accent surface */
    --accent: var(--black-alpha-4);
    --accent-foreground: var(--accent-black);

    /* Feedback */
    --destructive: var(--accent-crimson);
    --destructive-foreground: var(--accent-white);

    /* Framing */
    --border: var(--border-faint);
    --input: var(--border-faint);
    --ring: var(--heat-100); /* focus outlines use brand */

    /* Global rounding */
    --radius: 0.5rem;
  }

  /* If/when you enable dark mode, these are sane defaults.
     (You can delete this block to keep light-only.) */
  .dark {
    --background: var(--accent-black);
    --foreground: var(--accent-white);

    --card: color-mix(in oklab, var(--accent-black) 90%, white 10%);
    --card-foreground: var(--accent-white);

    --popover: var(--card);
    --popover-foreground: var(--accent-white);

    --primary: var(--heat-100);
    --primary-foreground: var(--accent-white);

    --secondary: color-mix(in oklab, black 85%, white 15%);
    --secondary-foreground: var(--accent-white);

    --muted: color-mix(in oklab, black 85%, white 15%);
    --muted-foreground: color-mix(in oklab, white 65%, black 35%);

    --accent: color-mix(in oklab, black 85%, white 15%);
    --accent-foreground: var(--accent-white);

    --destructive: var(--accent-crimson);
    --destructive-foreground: var(--accent-white);

    --border: color-mix(in oklab, white 14%, black 86%);
    --input: var(--border);
    --ring: var(--heat-100);
  }
}

/* Utilities */
@layer utilities {
  /* Hide scrollbar for Chrome, Safari and Opera */
  .no-scrollbar::-webkit-scrollbar { display: none; }
  /* Hide scrollbar for IE, Edge and Firefox */
  .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
}

/* React Modal animations */
.ReactModal__Overlay { opacity: 0; transition: opacity 300ms ease-in-out; }
.ReactModal__Overlay--after-open { opacity: 1; }
.ReactModal__Overlay--before-close { opacity: 0; }

.DialogOverlay {
  background-color: rgba(0, 0, 0, 0.5);
  position: fixed;
  inset: 0;
  animation: overlayShow 150ms cubic-bezier(0.16, 1, 0.3, 1);
  z-index: 100;
}

.DialogContent {
  background-color: white;
  border-radius: 6px;
  box-shadow:
    hsl(206 22% 7% / 35%) 0px 10px 38px -10px,
    hsl(206 22% 7% / 20%) 0px 10px 20px -15px;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 90vw;
  max-width: 650px;
  max-height: 85vh;
  animation: contentShow 500ms cubic-bezier(0.16, 1, 0.3, 1);
  z-index: 101;
}
.DialogContent:focus { outline: none; }

.DialogTitle { margin: 0; font-weight: 500; color: #000; font-size: 17px; }
.DialogDescription { margin: 10px 0 20px; color: #000; font-size: 15px; line-height: 1.5; }

/* Legacy .FireButton (kept for compatibility) */
.FireButton {
  color: #f8fafc;
  background-color: #111827;
  width: 100%;
  box-shadow:
    0 1px 3px 0 rgba(0, 0, 0, 0.1),
    0 1px 2px 0 rgba(0, 0, 0, 0.06);
  transition: box-shadow 0.3s ease;
}
.FireButton:hover { box-shadow: 0 0 8px 2px #ff5d22af; }

/* Animations */
@keyframes overlayShow { from { opacity: 0; } to { opacity: 1; } }
@keyframes contentShow {
  from { opacity: 0; transform: translate(-50%, -48%) scale(0.96); }
  to { opacity: 1; transform: translate(-50%, -50%) scale(1); }
}

.blog-heading:target { padding-bottom: 120px !important; }

@layer utilities {
  .extra-space { position: relative; }
  .extra-space::after {
    --target-size: 20px;
    content: '';
    position: absolute;
    inset: var(--target-size);
  }

  .marquee-animation {
    animation: marquee var(--speed, 10s) linear infinite var(--direction, forwards);
  }

  @keyframes marquee { to { transform: translateX(-50%); } }
}

/* Hide reCAPTCHA badge if present */
.grecaptcha-badge { visibility: hidden; }

/* Remove all focus styles from hero input (hero input has its own styles) */
input[type="text"]:focus,
input[type="text"]:focus-visible {
  outline: none !important;
  box-shadow: none !important;
  border-color: inherit !important;
}

/* ===== AI-Ready temporary brand + contrast overrides ===== */
@layer base {
  :root {
    /* Force brand blue (rgb(8,101,252)) for tokens */
    --primary: 217 96% 51%;
    --ring:    217 96% 51%;
  }
}

/* Force link color directly */
a { color: rgb(8 101 252) !important; }
a:hover { color: rgb(8 101 252 / 0.9) !important; }

/* Ensure readable default text */
:root, body { color: rgb(2 2 2); }
.bg-white, .card, .prose { color: rgb(2 2 2); }

/* Kill white text on white surfaces */
.bg-white .text-white,
.card .text-white,
.bg-[var(--card)] .text-white {
  color: rgb(2 2 2) !important;
}

/* Update FireButton hover glow */
.FireButton:hover { box-shadow: 0 0 8px 2px rgb(8 101 252 / 0.69); }
